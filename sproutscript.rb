#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative 'parser/rdparse'
require_relative 'parser/parse'
require_relative 'requirements/requirements'

# verifies that no stray arguments have been added
def command_check(arguments, control)
  (arguments - control).empty?
end

def help
  puts 'SproutScript: General usage'
  puts "\t- Ensure that the file is your last argument"
  puts "\t- Ensure that your file has the .sps extension\n"
  puts "\t- Optional arguments are placed before the file name"
  puts "\t- Example: ./sproutscript.rb --log projects/factorial.sps"
  puts 'Arguments:'
  puts "\t--log \t==> Prints debug and log info for the parser"
  puts "\t--tree \t==> Prints the main syntax tree generated by the parser"
end

def program
  file = ARGV.pop

  if file == '--help'
    help
    exit
  end

  # add all possible command line arguments here
  cl_arguments = ['--log', '--tree']

  raise SproutArgumentError unless command_check(ARGV, cl_arguments)

  sps = SproutScript.new
  sps.log unless ARGV.include?('--log')
  print_syntax_tree = if ARGV.include?('--tree')
                        true
                      else
                        false
                      end

  raise SproutFileNotFoundError, file unless File.exist? file

  out = ''
  File.open(file, 'r') do |f|
    content = f.readlines
    out = content.join
  end
  sps.sprout_parser.parse out
  sps.run(print_syntax_tree)
end

begin
  program
rescue Parser::ParseError => e
  puts '*-' * (IO.console.winsize[1] / 2)
  puts "\tERROR: A parse error occured!"
  puts "\tThese errors occur when the parser for the code encounters something it cannot manage."
  puts "\tPotential causes of this error is a missing semicolon after a row, a missing curly bracket for a block of code, or similar."
  puts "\t- #{e.message} \n\tat #{e.backtrace[0]}, #{e.backtrace[1]}, #{e.backtrace[2]}"
  puts '*-' * (IO.console.winsize[1] / 2)
end
